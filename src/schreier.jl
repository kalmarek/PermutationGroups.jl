#######################################################################
# Schreier Vectors
#######################################################################

@inline Base.in(x, schr::Schreier) = x in schr.orb
@inline Base.push!(schr::Schreier, x) = push!(schr.orb, x)

function Base.getindex(schr::Schreier, pt)
    gr_word = Word(schr.gens_inv, schr.orb, pt, schr.op)
    return inv(gr_word(schr.gens_inv))
end

@inline Base.iterate(schr::Schreier) = iterate(schr.orb)
@inline Base.iterate(schr::Schreier, s) = iterate(schr.orb, s)
@inline Base.length(schr::Schreier) = length(schr.orb)
@inline Base.eltype(::Schreier{GEl,I}) where {GEl, I} = I
@inline Base.first(schr::Schreier) = first(schr.orb)
@inline Base.last(schr::Schreier) = last(schr.orb)
@inline islast(schr::Schreier, pt) = islast(schr.orb,pt)

function Base.:(==)(s1::Schreier,s2::Schreier)
    s1.gens_inv == s2.gens_inv || return false
    s1.orb == s2.orb || return false
    s1.op == s2.op || return  false
    return true
end

Base.hash(schr::S, h::UInt) where S<:Schreier = hash(S, hash(schr.gens_inv, hash(schr.orb, hash(schr.op, h))))

@doc doc"""
    Schreier(gens, pt[, op=^])
Compute the Schreier Tree of `pt` under group generated by `gens`.
"""
Schreier(gens::Vector{<:GroupElement}, pt, op = ^) = Schreier(Orbit, gens, pt, op)

@doc doc"""
    Schreier(OrbT::Type{<:AbstractOrbit}, gens, pt[, op=^])
Compute the Schreier Tree of `pt` under group generated by `gens`.

The type `OrbT` will be used as a base storage for the orbit. `OrbT` must
implement _Orbit Protocol_`.
"""
function Schreier(OrbT::Type{<:AbstractOrbit}, gens::Vector{<:GroupElement}, pt, op = ^)
    schr = Schreier(inv.(gens), OrbT(pt, 0), op)
    for o in schr
        for (idx, g) in enumerate(gens)
            γ = op(o, g)
            if γ ∉ schr
                push!(schr,(γ, idx))
            end
        end
    end
    return schr
end

@doc doc"""
    getinv(schr::Schreier{GEl, T}, pt::T)::GEl
While simple indexing into Schreier Trees returns coset representatives `uᵦ`,
this method returns `inv(uᵦ)`, i.e. the group element which takes `pt` to
`first(schr)`, the initial point of `schr`.
"""
function getinv(schr::Schreier, pt)
    gr_word = Word(schr.gens_inv, schr.orb, pt, schr.op)
    g = gr_word(schr.gens_inv)
    return g
end

function orbit_stabilizer(gens::Vector{GEl}, pt, op = ^) where {GEl<:GroupElement}
    schr = Schreier(Orbit1, inv.(gens), pt)
    stab = Vector{GEl}()
    for o in schr
        for (idx,g) in enumerate(gens)
            γ = op(o, g)
            if γ ∉ schr
                push!(schr, (γ, g))
            else
                push!(stab, schr[o]*g*getinv(schr, γ))
            end
        end
    end
    return schr, Group(unique!(stab))
end
