function Base.show(io::IO, ::Type{<:PermGroup{I}}) where {I}
    return print(io, PermGroup, "{$I, …}")
end
# Base.show(io::IO, ::Type{<:Permutation{I}}) where I = print(io, Permutation, "{$I, …}")

function Base.show(io::IO, G::PermGroup)
    init =
        isdefined(G, :stabchain) ? " of order $(order(StabilizerChain(G)))" : ""
    ngen = ngens(G)

    return print(
        io,
        "Permutation group on ",
        ngen,
        " generator",
        ngen > 1 ? "s" : "",
        init,
    )
end

function Base.show(io::IO, ::MIME"text/plain", G::PermGroup)
    init =
        isdefined(G, :stabchain) ? " of order $(order(StabilizerChain(G)))" : ""
    ngen = ngens(G)

    println(
        io,
        "Permutation group on ",
        ngen,
        " generator",
        ngen > 1 ? "s" : "",
        init,
        " generated by",
    )
    return Base.print_array(io, gens(G))
end

# Base.show(io::IO, g::Permutation) = show(io, Perm.perm(g))
